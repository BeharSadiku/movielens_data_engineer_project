version: "3.9"

x-airflow-common: &x-airflow-common
  build: .
  environment:
    AIRFLOW__WEBSERVER__BASE_URL: "http://localhost:8080"
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}"
    AIRFLOW__CORE__EXECUTOR: "LocalExecutor"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    AIRFLOW_UID: 50000
    TZ: "UTC"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./dbt:/opt/airflow/dbt
    - ./databricks_config:/home/airflow/.databricks-config
    - ./data:/opt/airflow/data
    - /var/run/docker.sock:/var/run/docker.sock   # Docker access

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    ports:
      - "5432:5432"
    volumes:
      - airflow-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5
    restart: always

  airflow-init:
    <<: *x-airflow-common
    entrypoint: /bin/bash
    command: >
      -c "echo 'Waiting for Postgres...' && sleep 20 &&
          airflow db upgrade &&
          airflow users create --username ${AIRFLOW_ADMIN_USER} \
                               --firstname Admin \
                               --lastname User \
                               --role Admin \
                               --email ${AIRFLOW_ADMIN_EMAIL} \
                               --password ${AIRFLOW_ADMIN_PASSWORD}"
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  airflow-webserver:
    <<: *x-airflow-common
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *x-airflow-common
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

volumes:
  airflow-db-data:
